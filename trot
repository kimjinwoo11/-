import rclpy
import numpy as np
from geometry_msgs.msg import Twist, TwistStamped
from InverseKinematics import robot_IK
from GaitController import GaitController
from PIDController import PID_controller
from CommandManager.ParamsAndCmds import LegParam #leg에 대한 정보를 가져옴(stance _time=0.18,swing_time=0.24,time_step=0.02,max x_vel,y_vel,z_vel 등)

class TrotGaitController(GaitController): #gaitcontroller에서 상속을 받음
    def __init__(self, default_stance, stance_time, swing_time, time_step, use_imu):
        self.use_imu = use_imu
        self.use_button = True
        self.autoRest = True
        self.trotNeeded = True
        
        leg = LegParam() #leg param이란 class의 생성자 생성

        contact_phases = np.array([[1, 1, 1, 0],  # 0: Leg swing
                                   [1, 0, 1, 1],  # 1: Moving stance forward
                                   [1, 0, 1, 1],  
                                   [1, 1, 1, 0]]) 

        z_error_constant = 0.02 * 4    # This constant determines how fast we move
                                       # toward the goal in the z direction

        z_leg_lift = leg.gait.z_leg_lift #legparms에서 leg_lift라는 변수는 _trot_gait_param이란 클래스에 있는데 그냥 gait라고 적어놓아도 되는지 의문
                                         #0.07
        super().__init__(stance_time, swing_time, time_step, contact_phases, default_stance) # gaitcontroller에서 변수들을 상속받아옴

        self.max_x_vel = leg.gait.max_x_vel #0.024  legparam 에서 가져옴
        self.max_y_vel = leg.gait.max_y_vel #0.01
        self.max_yaw_rate = leg.gait.max_yaw_rate #0.06
        #다리의 현재 상태(stance,swing)에 따라 다른 클래스 사용 두 클래스 전부 이 파일 마지막 부분에서 만듦
        self.swingController = TrotSwingController(self.stance_ticks, self.swing_ticks, self.time_step,
                                                   self.phase_length, z_leg_lift, self.default_stance)

        self.stanceController = TrotStanceController(self.phase_length, self.stance_ticks, self.swing_ticks,
                                                     self.time_step, z_error_constant) #이 파일에서 새로 만든 클래스들을 실행

        # TODO : 게인값 조율
        self.pid_controller = PID_controller(0., 0., 0.) #pid controller라는 클래스의 생성자 생성

    def updateStateCommand(self, msg, state, command):
        command.cmd_vel[0] = msg.linear.x /1.5 * self.max_x_vel #x축 속도
        command.cme_vel[1] = msg.linear.y /1.5 * self.max_y_vel #y축 속도
        command.cmd_yaw_rate = msg.angular.z * self.max_yaw_rate #roll(x축 기준회전),pitch(y축 기준 회전),yaw(z축 기준 회전),각속도
        #보정기능 제어 코드(현재 주석처리중)
        # if self.use_button:
        #     if msg.buttons[7]:
        #         self.use_imu = not self.use_imu
        #         self.use_button = False
        #         rospy.loginfo(f"Trot Gait Controller - Use roll/pitch compensation: {self.use_imu}")

        #     elif msg.buttons[6]:
        #         self.autoRest = not self.autoRest
        #         if not self.autoRest:
        #             self.trotNeeded = True
        #         self.use_button = False
        #         rospy.loginfo(f"Trot Gait Controller - Use autorest: {self.autoRest}")
            
        # if not self.use_button:
        #     if not(msg.buttons[6] or msg.buttons[7]):
        #         self.use_button = True

    # 다음 발의 위치를 선정하는 핵심코드, 필요시 보정값을 더하여 보정된 발의 위치를 정해줌.
     def step(self, state, command):
        if self.autoRest:#현재 멈춰있다면 trotneeded=false
            if command.cmd_vel[0] == 0 and command.cmd_vel[1] == 0 and command.cmd_yaw_rate ==0:
                if state.ticks % (2*self.phase_length) ==0:
                    self.trotNeeded = False
            else:
                self.trotNeeded = True
        if self.trotNeeded:
            contact_modes = self.contacts(state.ticks)#gaitcontroller에서 가져옴,현재 tick의 값으로 phase index를 구해 각 발의 stance,swing 상태를 column의 형태로 가져옴 ex:[1,0,0,1]

            new_foot_locations = np.zeros((3,4)) #발 위치 초기화
            for leg_index in range(4): #각 발의 상채에 따라 다른 클래스를 이용해 각 발의 다음 위치 지정, 이떄는 보정 x
                contact_modes = contact_modes[leg_index]
                if contact_modes ==1:
                    new_location = self.stanceController.next_foot_location(leg_index, state, command)
                else:
                    swing_proportion = float(self.subphase_ticks(state.ticks))/float(self.swing_ticks) #현재 swing이 어느정도 진행되었는가, 0<proportion<1

                    new_location = self.swingController.next_foot_location(swing_proportion, leg_index, state, command)
                new_foot_locations[:, leg_index] = new_location
            
            # imu compensation, 위에서 구한 발의 위치에 보정값을 추가하여 보정된 발의 위치 구함
            if self.use_imu:
                compensation = self.pid_controller.run(state.imu_roll, state.imu_pitch)#pidcontroller class에서 run 함수 실행, 보정값은 2차원형태
                roll_compensation = -compensation[0] 
                pitch_compensation = -compensation[1]

                rot = rotxyz(roll_compensation, pitch_compensation, 0) 
                new_foot_locations = np.matmul(rot, new_foot_locations)
            state.ticks +=1
            return new_foot_locations
        else:
            temp = self.default_stance #기본값
            temp[2] = [command.robot_height]*4
            return temp
   #step을 실행하는 함수 run
     def run(self, state, command):
        state.foot_locations = self.step(state, command)
        state.robot_height = command.robot_height

        return state.foot_locations


        
class TrotSwingController(object): #swing하는 발의 위치 결정,발의 x,y축 위치 뿐만 아니라 남은 swing 시간(proportion)을 이용해 z축 상의 높이도 정해주는 듯
    def __init__(self, stance_ticks, swing_ticks, time_step, phase_length, z_leg_lift, default_stance):
        self.stance_ticks = stance_ticks #3개의 변수들은 gaitcontroller에서 설정
        self.swing_ticks = swing_ticks
        self.time_step = time_step
        self.phase_length = phase_length #gaitcontroller에서 정해줌
        self.z_leg_lift = z_leg_lift
        self.default_stance = default_stance

    def raibert_touchdwon_location(self, leg_index, command): #발이 최종적으로 도착을 하는 x,y축 상의 위치 결정, 이때 z축상의 회전값도 반영함, 보정은 x
        delta_pos_2d = command.cmd_vel * self.phase_length * self.time_step  #phaselength*time_step=time,2차원 여기서 왜 swing tick이 아니라 phase_length를 곱하는지 의문
        delta_pos = np.array([delta_pos_2d[0], delta_pos_2d[1], 0]) #2차원의값을 3차원의 겂으로 변경,z축상의 높이를 더해주기 위함

        theta = self.stance_ticks * self.time_step * command.cmd_yaw_rate #z축 상에서의 회전 정도
        rotation = rotz(theta)

        return np.matmul(rotation, self.default_stance[:, leg_index]) + delta_pos #계산을 통해 발의 위치 결정
    
    def swing_height(self, swing_phase): #swing_phase=swing이 진행되는 정도, 발의 z축 상의 높이 결정
        if swing_phase < 0.5: #발을 올리는 단계, 높이 상승
            swing_height_ = swing_phase / 0.5 * self.z_leg_lift
        else: #발을 내리는 단계
            swing_height_ = self.z_leg_lift * (1 - (swing_phase - 0.5) / 0.5)
        return swing_height_
    
    def next_foot_location(self, swing_prop, leg_index, state, command): #swing prop에 따른 발의 위치 지속적으로 업데이트
        assert swing_prop >= 0 and swing_prop <= 1
        foot_location = state.foot_locations[:, leg_index] #run 함수에서 나옴
        swing_height_ = self.swing_height(swing_prop)
        touchdown_location = self.raibert_touchdown_location(leg_index, command)

        time_left = self.time_step* self.swing_ticks * (1.0 - swing_prop) #최종적으로 도착까지 남은 시간
        
        velocity = (touchdown_location - foot_location) / float(time_left) *\
             np.array([1, 1, 0]) #발의 이동 속도

        delta_foot_location = velocity * self.time_step #발의 현재 time step 에서의 위치 (touchdown과는 다름)
        z_vector = np.array([0, 0, swing_height_ + command.robot_height])
        return foot_location * np.array([1, 1, 0]) + z_vector + delta_foot_location#발의 위치를 3차원으로 나타냄
    
class TrotStanceController(object): #stance하는 발의 위치 결정 여기서 의문이 드는게 로봇을 지지하는 발이 어떻게 움직이는지 의문, 이 코드에서는 대충 swing과는 반대 방향으로 발을 움직이게 함
    def __init__(self,phase_length, stance_ticks, swing_ticks, time_step, z_error_constant):
        self.phase_length = phase_length
        self.stance_ticks = stance_ticks
        self.swing_ticks = swing_ticks
        self.time_step = time_step
        self.z_error_constant = z_error_constant


    def position_delta(self, leg_index, state, command):
        z = state.foot_locations[2, leg_index]
            #발을 들지 않기에 2차원으로 계산
        step_dist_x = command.cmd_vel[0] *\
                      (float(self.phase_length)/self.swing_ticks)

        step_dist_y = command.cmd_vel[1] *\
                      (float(self.phase_length)/self.swing_ticks)

        velocity = np.array([-(step_dist_x/4)/(float(self.time_step)*self.stance_ticks), 
                             -(step_dist_y/4)/(float(self.time_step)*self.stance_ticks), 
                             1.0 / self.z_error_constant * (state.robot_height - z)])

        delta_pos = velocity * self.time_step
        delta_ori = rotz(-command.cmd_yaw_rate * self.time_step)
        return (delta_pos, delta_ori) #회전을 반영하지 않은 발의 위치와 로봇의 회전값 도출
    
    def next_foot_location(self, leg_index, state, command): #발의 위치와 회전값을 이용해 로봇의 발의 위치 결정
        foot_location = state.foot_locations[:, leg_index]
        (delta_pos, delta_ori) = self.position_delta(leg_index, state, command)
        next_foot_location = np.matmul(delta_ori, foot_location) + delta_pos
        return next_foot_location

        


