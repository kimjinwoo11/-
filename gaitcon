# -#!/usr/bin/env python3
#Author: mike4192 https://github.com/mike4192/spotMicro
#Modified by: lnotspotl

import numpy as np
#gaitcontroller 클래스 생성
class GaitController(object):
    def __init__(self, stance_time, swing_time, time_step, contact_phases, default_stance):
        self.stance_time = stance_time #발이 땅에 닿아있는 시간
        self.swing_time = swing_time #발이 공중에 있는 시간
        self.time_step = time_step #틱을 만들기 위해서 time step 불려옴(params파일에 저장되었음)
        self.contact_phases = contact_phases #4X4행렬의 형태로 존재,params에 존재, 4개의 발의 지면과의 접촉상태를 나타냄
        self.def_stance = default_stance

    @property
    def default_stance(self):
        return self.def_stance

    @property #로봇제어에서 정밀하게 로봇을 제어하기 위해 틱이라는 개념 도입
    def stance_ticks(self): 
        return int(self.stance_time / self.time_step)

    @property 
    def swing_ticks(self): 
        return int(self.swing_time / self.time_step)

    @property
    def phase_ticks(self): #4X4행렬의 각 column에서 0이 하나라도 있으면 swing tick,아니라면 stance tick을 넣어 1X4행렬 만듬
        temp = [] #temp에 추가될 시간은 한 phase 내에서의 tick을 의미. ex:[10,5,5,5]
        for i in range(len(self.contact_phases[0])):
            if 0 in self.contact_phases[:,i]:
                temp.append(self.swing_ticks)
            else:
                temp.append(self.stance_ticks)
        return temp

    @property
    def phase_length(self):#한 phase의 총 tick,주기
        return sum(self.phase_ticks)

    def phase_index(self, ticks): #ex:ticks=13,phase_length=20
        """ Calculate, which part of the gait cycle the robot should be in """
        phase_time = ticks % self.phase_length #13
        phase_sum = 0
        phase_ticks = self.phase_ticks #[5,10,5,10] (stance tick=5,swing tick=10)
        for i in range(len(self.contact_phases[0])):
            phase_sum += phase_ticks[i]
            if phase_time < phase_sum: #13<15.(5+10) when i=1
                return i #1(현재 로봇은 phase내 2번쨰 단계에 있음)
        assert False

    def subphase_ticks(self, ticks):#한 단계 내에서 남은 시간 계산
        """ Calculate the number of ticks (timesteps)
            since the begining of the current phase """
        phase_time = ticks % self.phase_length
        phase_sum = 0
        phase_ticks = self.phase_ticks
        for i in range(len(self.contact_phases[0])):
            phase_sum += phase_ticks[i]
            if phase_time < phase_sum:#i=1
                subphase_ticks = phase_time - phase_sum + phase_ticks[i] #13-15+10=8(phase내 1번단계를 완료하기 앞으로 8틱 남음
                return subphase_ticks
        assert False
    
    def contacts(self, ticks):
        """ Calculate which feet should be in contact """
        return self.contact_phases[:, self.phase_index(ticks)] #phase index에 상응하는 column 출력
